# sent_id = Tree TheFutureOfLinguistics-0
# sent_num = 1
# text = The #futureoflinguistics is integrative, computationally-aided, impactful in the world.
# sent = the #futureoflinguistics is integrative computationally aided impactful in the world
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "the"))
        :Head (Nom
            :Head (N :t "#futureoflinguistics")))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :PredComp (Coordination
            :Coordinate (AdjP
                :Head (Adj :t "integrative"))
            :Coordinate (VP
                :Mod (AdvP
                    :Head (Adv :p "," :t "computationally"))
                :Head (V :p "-" :t "aided" :l "aid"))
            :Coordinate (AdjP
                :Head (Adj :p "," :t "impactful")
                :Mod (PP
                    :Head (P :t "in")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "the"))
                        :Head (Nom
                            :Head (N :t "world" :p "."))))))))

# sent_id = Tree Here-sThePaper-0
# sent_num = 2
# text = Here's the paper that people who read it will find out about how resumptive pronouns help islands go down a little easier.
# sent = here -- 's -- the paper that people who -- read it will find out about how resumptive pronouns help islands go down a little easier --
(Clause
    :Prenucleus (a / PP
        :Head (P :t "here"))
    :Head (Clause
        :Head (Clause
            :Subj (b / GAP)
            :Head (VP
                :Head (V_aux :t "'s" :l "be")
                :PredComp (a / GAP)))
        :Postnucleus (b / NP
            :Det (DP
                :Head (D :t "the"))
            :Head (Nom
                :Head (N :t "paper")
                :Mod (Clause_rel
                    :Marker (Sdr :t "that")
                    :Head (Clause_rel
                        :Subj (NP
                            :Head (Nom
                                :Head (N :t "people")
                                :Mod (Clause_rel
                                    :Prenucleus (y / NP
                                        :Head (Nom
                                            :Head (N_pro :t "who")))
                                    :Head (Clause_rel
                                        :Subj (y / GAP)
                                        :Head (VP
                                            :Head (V :t "read")
                                            :Obj (NP
                                                :Head (Nom
                                                    :Head (N_pro :t "it" :note "resumptive pronoun"))))))))
                        :Head (VP
                            :Head (V_aux :t "will")
                            :Comp (Clause
                                :Head (VP
                                    :Head (V :t "find")
                                    :Particle (PP
                                        :Head (P :t "out"))
                                    :Comp (PP
                                        :Head (P :t "about")
                                        :Comp (Clause
                                            :Prenucleus (z / AdvP
                                                :Head (Adv :t "how"))
                                            :Head (Clause
                                                :Subj (NP
                                                    :Head (Nom
                                                        :Mod (AdjP
                                                            :Head (Adj :t "resumptive"))
                                                        :Head (N :t "pronouns" :l "pronoun")))
                                                :Head (VP
                                                    :Head (V :t "help")
                                                    :Obj (NP
                                                        :Head (Nom
                                                            :Head (N :t "islands" :l "island")))
                                                    :Comp (Clause
                                                        :Head (VP
                                                            :Head (VP
                                                                :Head (V :t "go")
                                                                :Comp (PP
                                                                    :Head (P :t "down")))
                                                            :Mod (AdvP
                                                                :Mod (DP
                                                                    :Head (D :t "a little" :subt "a" :subt "little"))
                                                                :Head (Adv :t "easier" :p ".")))
                                                        :Mod (z / GAP)))))))))))))))

# sent_id = Tree TrueNarcissism-0
# sent_num = 3
# text = True narcissism is just telling everyone your ideolect is a language.
# sent = true narcissism is just telling everyone your ideolect is a language
(Clause
    :Subj (NP
        :Head (Nom
            :Mod (AdjP
                :Head (Adj :t "true"))
            :Head (N :t "narcissism")))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :Comp (Clause
            :Mod (AdvP
                :Head (Adv :t "just"))
            :Head (VP
                :Head (V :t "telling" :l "tell")
                :Obj (NP
                    :Head (Nom
                        :Det-Head (DP
                            :Head (D :t "everyone"))))
                :Comp (Clause
                    :Subj (NP
                        :Det (NP
                            :Head (Nom
                                :Head (N_pro :t "your" :l "you")))
                        :Head (Nom
                            :Head (N :t "ideolect" :correct "idiolect" :l "idiolect")))
                    :Head (VP
                        :Head (V_aux :t "is" :l "be")
                        :PredComp (NP
                            :Det (DP
                                :Head (D :t "a"))
                            :Head (Nom
                                :Head (N :t "language" :p ".")))))))))

# sent_id = Tree IsThatWhatYouCall-0
# sent_num = 4
# text = Is that what you call WH-movement?
# sent = is that -- what you call -- WH-movement
(Clause
    :Prenucleus (x / V_aux :t "is" :l "be")
    :Head (Clause
        :Subj (NP
            :Head (Nom
                :Det-Head (DP
                    :Head (D :t "that"))))
        :Head (VP
            :Head (x / GAP)
            :PredComp (NP
                :Head (Nom
                    :Mod (Clause_rel
                        :Head-Prenucleus (y / NP
                            :Head (Nom
                                :Head (N_pro :t "what")))
                        :Head (Clause_rel
                            :Subj (NP
                                :Head (Nom
                                    :Head (N_pro :t "you")))
                            :Head (VP
                                :Head (V :t "call")
                                :Obj_dir (y / GAP)
                                :Obj_ind (NP
                                    :Head (Nom
                                        :Head (N :t "WH-movement" :subt "WH" :subt "-" :subt "movement" :p "?")))))))))))

# sent_id = Tree ItIsntThat-0
# sent_num = 5
# text = It isn't that there aren't enough workers, there just aren't enough workers at the wage firms want to pay.
# sent = it isn't that there aren't enough workers there just aren't enough workers at the wage firms want to pay --
(Coordination
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "it")))
        :Head (VP
            :Head (V_aux :t "isn't" :l "be" :subt "is" :subt "n't")
            :Comp (Clause :note "impersonal construction (p. 960)"
                :Marker (Sdr :t "that")
                :Head (Clause
                    :Subj (NP
                        :Head (Nom
                            :Head (N_pro :t "there")))
                    :Head (VP
                        :Head (V_aux :t "aren't" :l "be" :subt "are" :subt "n't")
                        :PredComp (NP
                            :Det (DP
                                :Head (D :t "enough"))
                            :Head (Nom
                                :Head (N :t "workers" :l "worker"))))))))
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :p "," :t "there")))
        :Head (VP
            :Mod (AdvP
                :Head (Adv :t "just"))
            :Head (VP
                :Head (VP
                    :Head (V_aux :t "aren't" :l "be" :subt "are" :subt "n't")
                    :PredComp (NP
                        :Det (DP
                            :Head (D :t "enough"))
                        :Head (Nom
                            :Head (N :t "workers" :l "worker"))))
                :Mod (PP
                    :Head (P :t "at")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "the"))
                        :Head (Nom
                            :Head (x / N :t "wage")
                            :Mod (Clause_rel
                                :Subj (NP
                                    :Head (Nom
                                        :Head (N :t "firms" :l "firm")))
                                :Head (VP
                                    :Head (V :t "want")
                                    :Comp (Clause
                                        :Head (VP
                                            :Marker (Sdr :t "to")
                                            :Head (VP
                                                :Head (V :t "pay" :p ".")
                                                :Obj (x / GAP)))))))))))))

# sent_id = Tree LanguageIdeologyIs-0
# sent_num = 6
# text = Language ideology is a hell of a drug!
# sent = language ideology is a hell of a drug
(Clause
    :Subj (NP
        :Head (Nom
            :Mod (Nom
                :Head (N :t "language"))
            :Head (N :t "ideology")))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :PredComp (NP
            :Det (DP
                :Head (D :t "a"))
            :Head (Nom
                :Head (N :t "hell")
                :Comp (PP
                    :Head (P :t "of")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (N :t "drug" :p "!"))))))))

# sent_id = Tree WhoDidYouSee-0
# sent_num = 7
# text = Anybody want some rhoticity chicken?
# sent = anybody want some rhoticity chicken
(Clause :note "ellipsis of auxiliary (does)?"
    :Subj (NP
        :Head (Nom
            :Det-Head (DP
                :Head (D :t "anybody"))))
    :Head (VP
        :Head (V :t "want")
        :Obj (NP
            :Det (DP
                :Head (D :t "some"))
            :Head (Nom
                :Mod (Nom
                    :Head (N :t "rhoticity"))
                :Head (N :t "chicken" :p "?")))))

# sent_id = Tree IThinkSeeingEverybodys-0
# sent_num = 8
# text = I think seeing Everybody's pooing face would be very interesting
# sent = I think seeing everybody's pooing face would be very interesting
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Head (V :t "think")
        :Comp (Clause
            :Subj (Clause
                :Head (VP
                    :Head (V :t "seeing" :l "see")
                    :Obj (NP
                        :Det (NP
                            :Head (Nom
                                :Det-Head (DP
                                    :Head (D :t "everybody's" :l "everybody" :subt "Everybody" :subt "'s"))))
                        :Head (Nom
                            :Mod (VP
                                :Head (V :t "pooing"))
                            :Head (N :t "face")))))
            :Head (VP
                :Head (V_aux :t "would")
                :Comp (Clause
                    :Head (VP
                        :Head (V_aux :t "be")
                        :PredComp (AdjP
                            :Mod (AdvP
                                :Head (Adv :t "very"))
                            :Head (Adj :t "interesting"))))))))

# sent_id = Tree IsThatAllYouGot-0
# sent_num = 9
# text = Is that all you got winter?
# sent = is that -- all you got -- winter
(Clause
    :Prenucleus (x / V_aux :t "is" :l "be")
    :Head (Clause
        :Subj (NP
            :Head (Nom
                :Det-Head (DP
                    :Head (D :t "that"))))
        :Head (VP
            :Head (x / GAP)
            :PredComp (NP
                :Head (Nom
                    :Det-Head (y / DP
                        :Head (D :t "all"))
                    :Mod (Clause_rel
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "you")))
                        :Head (VP
                            :Head (V :t "got" :l "get")
                            :Obj (y / GAP)))))))
    :Vocative (NP
        :Head (Nom
            :Head (N :t "winter" :p "?"))))

# sent_id = Tree HappierNewYear2-0
# sent_num = 10
# text = Have a happier new year
# sent = have a happier new year
(Clause
    :Head (VP
        :Head (V :t "have")
        :Obj (NP
            :Det (DP
                :Head (D :t "a"))
            :Head (Nom
                :Mod (AdjP
                    :Head (Adj :t "happier"))
                :Head (Nom
                    :Mod (AdjP
                        :Head (Adj :t "new"))
                    :Head (N :t "year"))))))

# sent_id = Tree DeltaHasBanned-0
# sent_num = 11
# text = Delta has banned the Navy Seal who killed Osama bin Laden for refusing to wear a mask
# sent = Delta has banned the Navy Seal who -- killed Osama bin Laden for refusing to wear a mask
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N :t "Delta")))
    :Head (VP
        :Head (V_aux :t "has" :l "have")
        :Comp (Clause
            :Head (VP
                :Head (V :t "banned" :l "ban")
                :Obj (NP
                    :Det (DP
                        :Head (D :t "the"))
                    :Head (Nom
                        :Head (Nom
                            :Mod (Nom
                                :Head (N :t "Navy"))
                            :Head (N :t "Seal"))
                        :Mod (Clause_rel
                            :Prenucleus (x / NP
                                :Head (Nom
                                    :Head (N_pro :t "who")))
                            :Head (Clause_rel
                                :Subj (x / GAP)
                                :Head (VP
                                    :Head (VP
                                        :Head (V :t "killed" :l "kill")
                                        :Obj (NP
                                            :Head (Nom
                                                :Head (N
                                                    :Flat (N :t "Osama")
                                                    :Flat (N :t "bin")
                                                    :Flat (N :t "Laden")))))
                                    :Mod (PP :note "punishment sense of 'for' - an argument could be made for Comp"
                                        :Head (P :t "for")
                                        :Comp (Clause
                                            :Head (VP
                                                :Head (V :t "refusing" :l "refuse")
                                                :Comp (Clause
                                                    :Head (VP
                                                        :Marker (Sdr :t "to")
                                                        :Head (VP
                                                            :Head (V :t "wear")
                                                            :Obj (NP
                                                                :Det (DP
                                                                    :Head (D :t "a"))
                                                                :Head (Nom
                                                                    :Head (N :t "mask"))))))))))))))))))

# sent_id = Tree WhyIsThereAWord-0
# sent_num = 12
# text = Why is there a word for everything?
# sent = why is there -- a word for everything --
(Clause
    :Prenucleus (i / AdvP
        :Head (Adv :t "why"))
    :Head (Clause
        :Prenucleus (j / V_aux :t "is" :l "be")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "there")))
            :Head (VP
                :Head (VP
                    :Head (j / GAP)
                    :PredComp (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (N :t "word")
                            :Mod (PP
                                :Head (P :t "for")
                                :Obj (NP
                                    :Head (Nom
                                        :Det-Head (DP
                                            :Head (D :t "everything" :p "?"))))))))
                :Mod (i / GAP)))))

# sent_id = Tree TheArrivalRecentlyOf-0
# sent_num = 13
# text = the arrival recently of the new year
# sent = the arrival recently of the new year
(NP
    :Det (DP
        :Head (D :t "the"))
    :Head (Nom
        :Head (Nom
            :Head (N :t "arrival")
            :Mod (AdvP
                :Head (Adv :t "recently" :note "medial adverb modifier within nominal. see Payne/Huddleston/Pullum (2010), 'The distribution and category status of adjectives and adverbs'")))
        :Comp (PP
            :Head (P :t "of")
            :Obj (NP
                :Det (DP
                    :Head (D :t "the"))
                :Head (Nom
                    :Mod (AdjP
                        :Head (Adj :t "new"))
                    :Head (N :t "year"))))))

# sent_id = Tree NowOutsideInZero-0
# sent_num = 14
# text = Now outside in zero degree weather, snow-blowing my sister a parking space for lunch.
# sent = now outside in zero degree weather snow-blowing my sister a parking space for lunch
(Clause
    :Supplement (PP
        :Head (P :t "now"))
    :Supplement (PP
        :Head (P :t "outside")
        :Supplement (PP
            :Head (P :t "in")
            :Obj (NP
                :Head (Nom
                    :Mod (Nom
                        :Mod (Nom
                            :Head (N :t "zero"))
                        :Head (N :t "degree"))
                    :Head (N :t "weather")))))
    :Head (VP
        :Head (V :p "," :t "snow-blowing" :subt "snow" :subt "-" :subt "blowing")
        :Obj_ind (NP
            :Det (NP
                :Head (Nom
                    :Head (N_pro :t "my" :l "I")))
            :Head (Nom
                :Head (N :t "sister")))
        :Obj_dir (NP
            :Det (DP
                :Head (D :t "a"))
            :Head (Nom
                :Head (Nom
                    :Mod (VP
                        :Head (V :t "parking"))
                    :Head (N :t "space"))
                :Mod (PP
                    :Head (P :t "for")
                    :Obj (NP
                        :Head (Nom
                            :Head (N :t "lunch" :p "."))))))))

# sent_id = Tree WhyDoTheyCallIt-0
# sent_num = 15
# text = Why do they call it "needs to be proofread by a native speaker" and not "requires L1 regularization"?
# sent = why do they -- call it needs to be proofread by a native speaker and not requires L1 regularization --
(Clause
    :Prenucleus (i / AdvP
        :Head (Adv :t "why"))
    :Head (Clause
        :Prenucleus (y / V_aux :t "do")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "they")))
            :Head (VP
                :Head (y / GAP)
                :Comp (Clause
                    :Head (VP
                        :Head (VP
                            :Head (V :t "call")
                            :Obj (NP
                                :Head (Nom
                                    :Head (N_pro :t "it")))
                            :PredComp (Coordination
                                :Coordinate (NP
                                    :Head (Nom
                                        :Compounding (VP
                                            :Head (V :p "\"" :t "needs" :l "need")
                                            :Comp (Clause
                                                :Head (VP
                                                    :Marker (Sdr :t "to")
                                                    :Head (VP
                                                        :Head (V_aux :t "be")
                                                        :Comp (Clause
                                                            :Head (VP
                                                                :Head (V :t "proofread")
                                                                :Comp (PP
                                                                    :Head (P :t "by")
                                                                    :Obj (NP
                                                                        :Det (DP
                                                                            :Head (D :t "a"))
                                                                        :Head (Nom
                                                                            :Mod (AdjP
                                                                                :Head (Adj :t "native"))
                                                                            :Head (N :t "speaker"))))))))))))
                                :Coordinate (NP
                                    :Marker (Coordinator :p "\"" :t "and")
                                    :Head (NP
                                        :Mod (AdvP
                                            :Head (Adv :t "not"))
                                        :Head (NP
                                            :Head (Nom
                                                :Compounding (VP
                                                    :Head (V :p "\"" :t "requires" :l "require")
                                                    :Obj (NP
                                                        :Head (Nom
                                                            :Mod (Nom
                                                                :Head (N :t "L1"))
                                                            :Head (N :t "regularization" :p "\"" :p "?"))))))))))
                        :Mod (i / GAP)))))))

# sent_id = Tree ItsNotPedantry-0
# sent_num = 16
# text = If your usage argument is well-reasoned, motivated by real-world consequences, and based on evidence, it's not pedantry!
# sent = if your usage argument is well reasoned motivated by real world consequences and based on evidence it 's not pedantry
(Clause
    :Mod (PP
        :Head (P :t "if")
        :Comp (Clause
            :Subj (NP
                :Det (NP
                    :Head (Nom
                        :Head (N_pro :t "your" :l "you")))
                :Head (Nom
                    :Mod (Nom
                        :Head (N :t "usage"))
                    :Head (N :t "argument")))
            :Head (VP
                :Head (V_aux :t "is" :l "be")
                :PredComp (Coordination
                    :Coordinate (VP
                        :Mod (AdvP
                            :Head (Adv :t "well"))
                        :Head (V :p "-" :t "reasoned" :l "reason"))
                    :Coordinate (VP
                        :Head (V :p "," :t "motivated" :l "motivate")
                        :Comp (PP
                            :Head (P :t "by")
                            :Obj (NP
                                :Head (Nom
                                    :Mod (Nom
                                        :Mod (AdjP
                                            :Head (Adj :t "real"))
                                        :Head (N :p "-" :t "world"))
                                    :Head (N :t "consequences" :l "consequence")))))
                    :Coordinate (VP
                        :Marker (Coordinator :p "," :t "and")
                        :Head (VP
                            :Head (V :t "based" :l "base")
                            :Comp (PP
                                :Head (P :t "on")
                                :Obj (NP
                                    :Head (Nom
                                        :Head (N :t "evidence"))))))))))
    :Head (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :p "," :t "it")))
        :Head (VP
            :Head (VP
                :Head (V_aux :t "'s" :l "be")
                :Mod (AdvP
                    :Head (Adv :t "not")))
            :PredComp (NP
                :Head (Nom
                    :Head (N :t "pedantry" :p "!"))))))

# sent_id = Tree YouMayHaveHeard-0
# sent_num = 17
# text = You may have heard that learning another language makes you smarter.
# sent = you may have heard that learning another language makes you smarter
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "you")))
    :Head (VP
        :Head (V_aux :t "may")
        :Comp (Clause
            :Head (VP
                :Head (V_aux :t "have")
                :Comp (Clause
                    :Head (VP
                        :Head (V :t "heard" :l "hear")
                        :Comp (Clause
                            :Marker (Sdr :t "that")
                            :Head (Clause
                                :Subj (Clause
                                    :Head (VP
                                        :Head (V :t "learning" :l "learn")
                                        :Obj (NP
                                            :Det (DP
                                                :Head (D :t "another"))
                                            :Head (Nom
                                                :Head (N :t "language")))))
                                :Head (VP
                                    :Head (V :t "makes" :l "make")
                                    :Obj (NP
                                        :Head (Nom
                                            :Head (N_pro :t "you")))
                                    :PredComp (AdjP
                                        :Head (Adj :t "smarter" :p ".")))))))))))

# sent_id = Tree JapaneseFarmersWho-0
# sent_num = 18
# text = Japanese farmers who use their rice paddies to create artistic murals
# sent = Japanese farmers who -- use their rice paddies to create artistic murals
(NP
    :Head (Nom
        :Head (Nom
            :Mod (AdjP
                :Head (Adj :t "Japanese"))
            :Head (N :t "farmers" :l "farmer"))
        :Mod (Clause_rel
            :Prenucleus (x / NP
                :Head (Nom
                    :Head (N_pro :t "who")))
            :Head (Clause_rel
                :Subj (x / GAP)
                :Head (VP
                    :Head (V :t "use")
                    :Obj (NP
                        :Det (NP
                            :Head (Nom
                                :Head (N_pro :t "their" :l "they")))
                        :Head (Nom
                            :Mod (Nom
                                :Head (N :t "rice"))
                            :Head (N :t "paddies" :l "paddy")))
                    :Comp (Clause
                        :Head (VP
                            :Marker (Sdr :t "to")
                            :Head (VP
                                :Head (V :t "create")
                                :Obj (NP
                                    :Head (Nom
                                        :Mod (AdjP
                                            :Head (Adj :t "artistic"))
                                        :Head (N :t "murals" :l "mural")))))))))))

# sent_id = Tree WomanRuledDead2-0
# sent_num = 19
# text = Woman Ruled Dead in 2017 Fights to be Declared Alive
# sent = woman ruled dead in 2017 fights to be declared alive
(Nom :note "'Wrong answers only version' (https://twitter.com/DailySyntaxTree/status/1351714293071409157)"
    :Head (N :t "woman")
    :Mod (Clause
        :Head (VP
            :Head (VP
                :Head (V :t "ruled" :l "rule")
                :PredComp (AdjP
                    :Head (Adj :t "dead")))
            :Mod (PP
                :Head (P :t "in")
                :Obj (NP
                    :Det (DP
                        :Head (D :t "2017"))
                    :Head (Nom
                        :Head (N :t "fights" :l "fight")
                        :Comp (Clause
                            :Head (VP
                                :Marker (Sdr :t "to")
                                :Head (VP
                                    :Head (V_aux :t "be")
                                    :Comp (Clause
                                        :Head (VP
                                            :Head (V :t "declared" :l "declare")
                                            :PredComp (AdjP
                                                :Head (Adj :t "alive")))))))))))))

# sent_id = Tree ALanguageIsADialect-0
# sent_num = 20
# text = A language is a dialect with a Duolingo course.
# sent = a language is a dialect with a Duolingo course
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "a"))
        :Head (Nom
            :Head (N :t "language")))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :PredComp (NP
            :Det (DP
                :Head (D :t "a"))
            :Head (Nom
                :Head (N :t "dialect")
                :Mod (PP
                    :Head (P :t "with")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Mod (Nom
                                :Head (N :t "Duolingo"))
                            :Head (N :t "course" :p "."))))))))

# sent_id = Tree ThatsWhat-0
# sent_num = 21
# text = So that's what I'm particularly interested in seeing if is true.
# sent = so that 's what I 'm particularly interested in seeing if -- is true
(Clause
    :Marker (Coordinator :t "so")
    :Head (Clause
        :Subj (NP
            :Head (Nom
                :Det-Head (DP
                    :Head (D :t "that"))))
        :Head (VP
            :Head (V_aux :t "'s" :l "be")
            :PredComp (NP
                :Head (Nom
                    :Mod (Clause_rel
                        :Head-Prenucleus (y / NP
                            :Head (Nom
                                :Head (N_pro :t "what")))
                        :Head (Clause_rel
                            :Subj (NP
                                :Head (Nom
                                    :Head (N_pro :t "I")))
                            :Head (VP
                                :Head (V_aux :t "'m" :l "be")
                                :PredComp (AdjP
                                    :Mod (AdvP
                                        :Head (Adv :t "particularly"))
                                    :Head (AdjP
                                        :Head (Adj :t "interested")
                                        :Comp (PP
                                            :Head (P :t "in")
                                            :Comp (Clause
                                                :Head (VP
                                                    :Head (V :t "seeing" :l "see")
                                                    :Comp (Clause
                                                        :Marker (Sdr :t "if")
                                                        :Head (Clause
                                                            :Subj (y / GAP)
                                                            :Head (VP
                                                                :Head (V_aux :t "is" :l "be")
                                                                :PredComp (AdjP
                                                                    :Head (Adj :t "true" :p "."))))))))))))))))))

# sent_id = Tree ThisHasBeen-0
# sent_num = 22
# text = This has been arts and crafts hour with a syntactician.
# sent = this has been arts and crafts hour with a syntactician
(Clause
    :Subj (NP
        :Head (Nom
            :Det-Head (DP
                :Head (D :t "this"))))
    :Head (VP
        :Head (V_aux :t "has" :l "have")
        :Comp (Clause
            :Head (VP
                :Head (V_aux :t "been" :l "be")
                :PredComp (NP
                    :Head (Nom
                        :Head (Nom
                            :Mod (Coordination
                                :Coordinate (NP
                                    :Head (Nom
                                        :Head (N :t "arts" :l "art")))
                                :Coordinate (NP
                                    :Marker (Coordinator :t "and")
                                    :Head (NP
                                        :Head (Nom
                                            :Head (N :t "crafts" :l "craft")))))
                            :Head (N :t "hour"))
                        :Mod (PP
                            :Head (P :t "with")
                            :Obj (NP
                                :Det (DP
                                    :Head (D :t "a"))
                                :Head (Nom
                                    :Head (N :t "syntactician" :p "."))))))))))

# sent_id = Tree GettingAPhD-0
# sent_num = 23
# text = Getting a PhD has long been an aspiration of mine.
# sent = getting a PhD has long been an aspiration of mine
(Clause
    :Subj (Clause
        :Head (VP
            :Head (V :t "getting" :l "get")
            :Obj (NP
                :Det (DP
                    :Head (D :t "a"))
                :Head (Nom
                    :Head (N :t "PhD")))))
    :Head (VP
        :Head (VP
            :Head (V_aux :t "has" :l "have")
            :Mod (AdvP
                :Head (Adv :t "long")))
        :Comp (Clause
            :Head (VP
                :Head (V_aux :t "been" :l "be")
                :PredComp (NP
                    :Det (DP
                        :Head (D :t "an" :l "a"))
                    :Head (Nom
                        :Head (N :t "aspiration")
                        :Mod (PP
                            :Head (P :t "of")
                            :Obj (NP
                                :Head (Nom
                                    :Head (N :t "mine" :p "."))))))))))

# sent_id = Tree HowWellDoes-0
# sent_num = 24
# text = How well does the minimalist grammar formalism match up with everyday minimalist syntax?
# sent = how well does the minimalist grammar formalism -- match up with everyday minimalist syntax --
(Clause
    :Prenucleus (x / AdvP
        :Mod (AdvP
            :Head (Adv :t "how"))
        :Head (Adv :t "well"))
    :Head (Clause
        :Prenucleus (y / V_aux :t "does" :l "do")
        :Head (Clause
            :Subj (NP
                :Det (DP
                    :Head (D :t "the"))
                :Head (Nom
                    :Mod (Nom
                        :Mod (Nom
                            :Head (N :t "minimalist"))
                        :Head (N :t "grammar"))
                    :Head (N :t "formalism")))
            :Head (VP
                :Head (y / GAP)
                :Comp (Clause
                    :Head (VP
                        :Head (VP
                            :Head (V :t "match")
                            :Particle (PP
                                :Head (P :t "up"))
                            :Comp (PP
                                :Head (P :t "with")
                                :Obj (NP
                                    :Head (Nom
                                        :Mod (AdjP
                                            :Head (Adj :t "everyday"))
                                        :Head (Nom
                                            :Mod (Nom
                                                :Head (N :t "minimalist"))
                                            :Head (N :t "syntax" :p "?"))))))
                        :Mod (x / GAP)))))))

# sent_id = Tree ThisMustNowBe-0
# sent_num = 25
# text = This must now be a moment to think again about the country that we want to be.
# sent = this must now be a moment to think again about the country that we want to be -- --
(Clause
    :Subj (NP
        :Head (Nom
            :Det-Head (DP
                :Head (D :t "this"))))
    :Head (VP
        :Head (V_aux :t "must")
        :Comp (Clause
            :Mod (PP
                :Head (P :t "now"))
            :Head (VP
                :Head (V_aux :t "be")
                :PredComp (NP
                    :Det (DP
                        :Head (D :t "a"))
                    :Head (Nom
                        :Head (x / N :t "moment")
                        :Mod (Clause_rel
                            :Head (VP
                                :Marker (Sdr :t "to")
                                :Head (VP
                                    :Head (VP
                                        :Head (VP
                                            :Head (V :t "think")
                                            :Mod (AdvP :note "medial adverb"
                                                :Head (Adv :t "again")))
                                        :Comp (PP
                                            :Head (P :t "about")
                                            :Obj (NP
                                                :Det (DP
                                                    :Head (D :t "the"))
                                                :Head (Nom
                                                    :Head (y / N :t "country")
                                                    :Mod (Clause_rel
                                                        :Marker (Sdr :t "that")
                                                        :Head (Clause_rel
                                                            :Subj (NP
                                                                :Head (Nom
                                                                    :Head (N_pro :t "we")))
                                                            :Head (VP
                                                                :Head (V :t "want")
                                                                :Comp (Clause
                                                                    :Head (VP
                                                                        :Marker (Sdr :t "to")
                                                                        :Head (VP
                                                                            :Head (V_aux :t "be" :p ".")
                                                                            :PredComp (y / GAP)))))))))))
                                    :Mod (x / GAP))))))))))

# sent_id = Tree ManyMorePeopleShouldTake-0
# sent_num = 26
# text = Many more people should take linguistics courses.
# sent = many more people should take linguistics courses
(Clause
    :Subj (NP
        :Det (DP
            :Mod (DP
                :Head (D :t "many"))
            :Head (D :t "more"))
        :Head (Nom
            :Head (N :t "people")))
    :Head (VP
        :Head (V_aux :t "should")
        :Comp (Clause
            :Head (VP
                :Head (V :t "take")
                :Obj (NP
                    :Head (Nom
                        :Mod (Nom
                            :Head (N :t "linguistics" :l "linguistic"))
                        :Head (N :t "courses" :l "course" :p ".")))))))

# sent_id = Tree AllYourTreeDiagrams-0
# sent_num = 27
# text = All my tree diagrams include descriptions.
# sent = all my tree diagrams include descriptions
(Clause
    :Subj (NP
        :Mod (DP :note "predeterminer"
            :Head (D :t "all"))
        :Head (NP
            :Det (NP
                :Head (Nom
                    :Head (N_pro :t "my" :l "I")))
            :Head (Nom
                :Mod (Nom
                    :Head (N :t "tree"))
                :Head (N :t "diagrams" :l "diagram"))))
    :Head (VP
        :Head (V :t "include")
        :Obj (NP
            :Head (Nom
                :Head (N :t "descriptions" :l "description" :p ".")))))

# sent_id = Tree AllYourBase-0
# sent_num = 28
# text = all your base are belong to us
# sent = all your base are belong to us
(Clause
    :Subj (NP
        :Mod (DP :note "predeterminer"
            :Head (D :t "all"))
        :Head (NP
            :Det (NP
                :Head (Nom
                    :Head (N_pro :t "your" :l "you")))
            :Head (Nom
                :Head (N :t "base"))))
    :Head (VP
        :Head (V_aux :t "are" :l "be")
        :Comp (Clause
            :Head (VP
                :Head (V :t "belong")
                :Comp (PP
                    :Head (P :t "to")
                    :Obj (NP
                        :Head (Nom
                            :Head (N_pro :t "us" :l "we"))))))))

# sent_id = Tree OneCanNeverTell-0
# sent_num = 29
# text = One can never tell when or even whether Alan was wholly serious.
# sent = one can never tell when -- or even whether -- Alan was wholly serious --
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "one")))
    :Head (VP
        :Head (V_aux :t "can")
        :Comp (Clause
            :Mod (AdvP
                :Head (Adv :t "never"))
            :Head (VP
                :Head (V :t "tell")
                :Comp (Coordination
                    :Head (Coordination
                        :Coordinate (Clause
                            :Prenucleus (x / PP
                                :Head (P :t "when"))
                            :Head (y / GAP))
                        :Coordinate (Clause
                            :Marker (Coordinator :t "or")
                            :Head (Clause
                                :Mod (AdvP
                                    :Head (Adv :t "even"))
                                :Head (Clause
                                    :Marker (Sdr :t "whether")
                                    :Head (y / GAP)))))
                    :Postnucleus (y / Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N :t "Alan")))
                        :Head (VP
                            :Head (VP
                                :Head (V_aux :t "was" :l "be")
                                :PredComp (AdjP
                                    :Mod (AdvP
                                        :Head (Adv :t "wholly"))
                                    :Head (Adj :t "serious" :p ".")))
                            :Mod (x / GAP))))))))

# sent_id = Tree SIEGtrees3-102
# sent_num = 30
# text = The preface was written by Sue.
# sent = the preface was written by Sue
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "the"))
        :Head (Nom
            :Head (N :t "preface")))
    :Head (VP
        :Head (V_aux :t "was" :l "be")
        :Comp (Clause
            :Head (VP
                :Head (V :t "written" :l "write")
                :Comp (PP
                    :Head (P :t "by")
                    :Obj (NP
                        :Head (Nom
                            :Head (N :t "Sue" :p "."))))))))

# sent_id = Tree ManyAHorseRaced-0
# sent_num = 31
# text = Many a horse raced past the barn doth fall.
# sent = many a horse raced past the barn doth fall
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "many a" :subt "Many" :subt "a"))
        :Head (Nom
            :Head (N :t "horse")
            :Mod (Clause
                :Head (VP
                    :Head (V :t "raced" :l "race")
                    :Comp (PP
                        :Head (P :t "past")
                        :Obj (NP
                            :Det (DP
                                :Head (D :t "the"))
                            :Head (Nom
                                :Head (N :t "barn"))))))))
    :Head (VP
        :Head (V_aux :t "doth" :l "do")
        :Comp (Clause
            :Head (VP
                :Head (V :t "fall" :p ".")))))

# sent_id = Tree KindaWantTo-0
# sent_num = 32
# text = Kinda want to take my huge IKEA plastic storage box lid out and go sledding.
# sent = kinda want to take my huge IKEA plastic storage box lid out and go sledding
(Clause
    :Mod (AdvP
        :Head (Adv :t "kinda"))
    :Head (VP
        :Head (V :t "want")
        :Comp (Clause
            :Head (VP
                :Marker (Sdr :t "to")
                :Head (Coordination
                    :Coordinate (VP
                        :Head (V :t "take")
                        :Obj (NP
                            :Det (NP
                                :Head (Nom
                                    :Head (N_pro :t "my" :l "I")))
                            :Head (Nom
                                :Mod (AdjP
                                    :Head (Adj :t "huge"))
                                :Head (Nom
                                    :Mod (Nom
                                        :Head (N :t "IKEA"))
                                    :Head (Nom
                                        :Mod (Nom
                                            :Mod (AdjP
                                                :Head (Adj :t "plastic"))
                                            :Head (Nom
                                                :Mod (Nom
                                                    :Head (N :t "storage"))
                                                :Head (N :t "box")))
                                        :Head (N :t "lid")))))
                        :Particle (PP
                            :Head (P :t "out")))
                    :Coordinate (VP
                        :Marker (Coordinator :t "and")
                        :Head (VP
                            :Head (V :t "go")
                            :Comp (Clause
                                :Head (VP
                                    :Head (V :t "sledding" :p "."))))))))))

# sent_id = Tree IdidntRealize-0
# sent_num = 33
# text = I didn't realize how much hungrier than I thought I was I am.
# sent = I didn't realize how much hungrier than I thought I was I am --
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Head (V_aux :t "didn't" :l "do" :subt "did" :subt "n't")
        :Comp (Clause
            :Head (VP
                :Head (V :t "realize")
                :Comp (Clause :note "exclamative"
                    :Prenucleus (x / AdjP
                        :Mod (AdvP
                            :Mod (AdvP
                                :Head (Adv :t "how"))
                            :Head (Adv :t "much"))
                        :Head (AdjP
                            :Head (Adj :t "hungrier")
                            :Comp (PP
                                :Head (P :t "than")
                                :Comp (Clause :note "comparative"
                                    :Subj (NP
                                        :Head (Nom
                                            :Head (N_pro :t "I")))
                                    :Head (VP
                                        :Head (V :t "thought" :l "think")
                                        :Comp (Clause
                                            :Subj (NP
                                                :Head (Nom
                                                    :Head (N_pro :t "I")))
                                            :Head (VP
                                                :Head (V_aux :t "was" :l "be"))))))))
                    :Head (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "I")))
                        :Head (VP
                            :Head (V_aux :t "am" :l "be" :p ".")
                            :PredComp (x / GAP))))))))

# sent_id = Tree EvenHappierThanAPig2-0
# sent_num = 34
# text = even happier than a pig in shit
# sent = even happier than a pig in shit
(AdjP
    :Mod (AdvP
        :Head (Adv :t "even"))
    :Head (AdjP
        :Head (Adj :t "happier")
        :Comp (PP
            :Head (P :t "than")
            :Obj (NP
                :Det (DP
                    :Head (D :t "a"))
                :Head (Nom
                    :Head (N :t "pig")
                    :Mod (PP
                        :Head (P :t "in")
                        :Obj (NP
                            :Head (Nom
                                :Head (N :t "shit")))))))))

# sent_id = Tree SIEGtrees-21
# sent_num = 35
# text = Help me prepare lunch
# sent = help me prepare lunch
(Clause
    :Head (VP
        :Head (V :t "help")
        :Obj (NP
            :Head (Nom
                :Head (N_pro :t "me" :l "I")))
        :Comp (Clause
            :Head (VP
                :Head (V :t "prepare")
                :Obj (NP
                    :Head (Nom
                        :Head (N :t "lunch")))))))

# sent_id = Tree IBetThisTweet-0
# sent_num = 36
# text = I bet this tweet would have been more popular if I had twitten it 11 months later.
# sent = I bet this tweet would have been more popular if I had twitten it 11 months later
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Head (V :t "bet")
        :Comp (Clause
            :Subj (NP
                :Det (DP
                    :Head (D :t "this"))
                :Head (Nom
                    :Head (N :t "tweet")))
            :Head (VP
                :Head (V_aux :t "would")
                :Comp (Clause
                    :Head (VP
                        :Head (V_aux :t "have")
                        :Comp (Clause
                            :Head (VP
                                :Head (V_aux :t "been" :l "be")
                                :PredComp (AdjP
                                    :Head (AdjP
                                        :Mod (AdvP
                                            :Head (Adv :t "more"))
                                        :Head (Adj :t "popular"))
                                    :Mod (PP
                                        :Head (P :t "if")
                                        :Comp (Clause
                                            :Subj (NP
                                                :Head (Nom
                                                    :Head (N_pro :t "I")))
                                            :Head (VP
                                                :Head (V_aux :t "had" :l "have")
                                                :Comp (Clause
                                                    :Head (VP
                                                        :Head (VP
                                                            :Head (V :t "twitten" :l "twit")
                                                            :Obj (NP
                                                                :Head (Nom
                                                                    :Head (N_pro :t "it"))))
                                                        :Mod (AdvP
                                                            :Mod (NP
                                                                :Det (DP
                                                                    :Head (D :t "11"))
                                                                :Head (Nom
                                                                    :Head (N :t "months" :l "month")))
                                                            :Head (Adv :t "later" :p "."))))))))))))))))

# sent_id = Tree MyFavoritePlaywright-0
# sent_num = 37
# text = My favorite playwright is Lorraine Hansberry who I am writing a book about that will be released this spring.
# sent = my favorite playwright is Lorraine Hansberry who I am writing a book about -- that -- will be released this spring
(Clause
    :Subj (NP
        :Det (NP
            :Head (Nom
                :Head (N_pro :t "my" :l "I")))
        :Head (Nom
            :Mod (AdjP
                :Head (Adj :t "favorite"))
            :Head (N :t "playwright")))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :PredComp (NP
            :Head (Nom
                :Head (N
                    :Flat (N :t "Lorraine")
                    :Flat (N :t "Hansberry")))
            :Supplement (Clause_rel
                :Prenucleus (x / NP
                    :Head (Nom
                        :Head (N_pro :t "who")))
                :Head (Clause_rel
                    :Subj (NP
                        :Head (Nom
                            :Head (N_pro :t "I")))
                    :Head (VP
                        :Head (V_aux :t "am" :l "be")
                        :Comp (Clause
                            :Head (VP
                                :Head (V :t "writing" :l "write")
                                :Obj (NP
                                    :Det (DP
                                        :Head (D :t "a"))
                                    :Head (Nom
                                        :Head (y / Nom
                                            :Head (N :t "book")
                                            :Comp (PP
                                                :Head (P :t "about")
                                                :Obj (x / GAP)))
                                        :Mod (Clause_rel
                                            :Marker (Sdr :t "that")
                                            :Head (Clause_rel
                                                :Subj (y / GAP)
                                                :Head (VP
                                                    :Head (V_aux :t "will")
                                                    :Comp (Clause
                                                        :Head (VP
                                                            :Head (VP
                                                                :Head (V_aux :t "be")
                                                                :Comp (Clause
                                                                    :Head (VP
                                                                        :Head (V :t "released" :l "release"))))
                                                            :Mod (NP
                                                                :Det (DP
                                                                    :Head (D :t "this"))
                                                                :Head (Nom
                                                                    :Head (N :t "spring" :p "."))))))))))))))))))

# sent_id = Tree WeMustOpenEveryDoor-0
# sent_num = 38
# text = We must open the doors and we must see to it they remain open so that others can pass through.
# sent = we must open the doors and we must see to it they remain open so that others can pass through
(Coordination
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "we")))
        :Head (VP
            :Head (V_aux :t "must")
            :Comp (Clause
                :Head (VP
                    :Head (V :t "open")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "the"))
                        :Head (Nom
                            :Head (N :t "doors" :l "door")))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "and")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "we")))
            :Head (VP
                :Head (V_aux :t "must")
                :Comp (Clause
                    :Head (VP
                        :Head (V :t "see")
                        :Comp (PP
                            :Head (P :t "to")
                            :Obj (NP
                                :Head (Nom
                                    :Head (N_pro :t "it"))))
                        :Comp (Clause
                            :Subj (NP
                                :Head (Nom
                                    :Head (N_pro :t "they")))
                            :Head (VP
                                :Head (VP
                                    :Head (V :t "remain")
                                    :PredComp (AdjP
                                        :Head (Adj :t "open")))
                                :Mod (PP
                                    :Head (P :t "so")
                                    :Comp (Clause
                                        :Marker (Sdr :t "that")
                                        :Head (Clause
                                            :Subj (NP
                                                :Head (Nom
                                                    :Head (N :t "others" :l "other")))
                                            :Head (VP
                                                :Head (V_aux :t "can")
                                                :Comp (Clause
                                                    :Head (VP
                                                        :Head (V :t "pass")
                                                        :Comp (PP
                                                            :Head (P :t "through" :p "."))))))))))))))))

# sent_id = Tree WhatARemarkableClaim-0
# sent_num = 39
# text = What a remarkable claim to make!
# sent = what a remarkable claim to make --
(NP
    :Mod (AdjP
        :Head (Adj :t "what"))
    :Head (NP
        :Det (DP
            :Head (D :t "a"))
        :Head (Nom
            :Head (x / Nom
                :Mod (AdjP
                    :Head (Adj :t "remarkable"))
                :Head (N :t "claim"))
            :Comp_ind (Clause
                :Head (VP
                    :Marker (Sdr :t "to")
                    :Head (VP
                        :Head (V :t "make" :p "!")
                        :Obj (x / GAP)))))))

# sent_id = Tree ShouldProbably-0
# sent_num = 40
# text = should probably read books more and Twitter less
# sent = should probably read books more and Twitter less
(Clause
    :Head (VP
        :Head (VP
            :Head (V_aux :t "should")
            :Mod (AdvP
                :Head (Adv :t "probably")))
        :Comp (Clause
            :Head (VP
                :Head (V :t "read")
                :Obj+Mod (Coordination
                    :Coordinate (NP+AdvP
                        :Obj (NP
                            :Head (Nom
                                :Head (N :t "books" :l "book")))
                        :Mod (AdvP
                            :Head (Adv :t "more")))
                    :Coordinate (NP+AdvP
                        :Marker (Coordinator :t "and")
                        :Head (NP+AdvP
                            :Obj (NP
                                :Head (Nom
                                    :Head (N :t "Twitter")))
                            :Mod (AdvP
                                :Head (Adv :t "less")))))))))

# sent_id = Tree UpdatingAnApp-0
# sent_num = 41
# text = Updating an app for my 6 year old and he asked if it had finished the updation yet.
# sent = updating an app for my 6-year-old and he asked if it had finished the updation yet
(Coordination
    :Coordinate (Clause
        :Head (VP
            :Head (V :t "updating" :l "update")
            :Obj (NP
                :Det (DP
                    :Head (D :t "an" :l "a"))
                :Head (Nom
                    :Head (N :t "app")
                    :Mod (PP
                        :Head (P :t "for")
                        :Obj (NP
                            :Det (NP
                                :Head (Nom
                                    :Head (N_pro :t "my" :l "I")))
                            :Head (Nom
                                :Head (N :t "6-year-old" :subt "6" :subt "year" :subt "old" :note "p. 1660 says this construction produces compound adjectives that 'readily convert to nouns', though arguably '6 year' could be treated like an attributive Nom in a compound"))))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "and")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "he")))
            :Head (VP
                :Head (V :t "asked" :l "ask")
                :Comp (Clause
                    :Marker (Sdr :t "if")
                    :Head (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "it")))
                        :Head (VP
                            :Head (V_aux :t "had" :l "have")
                            :Comp (Clause
                                :Head (VP
                                    :Head (VP
                                        :Head (V :t "finished" :l "finish")
                                        :Obj (NP
                                            :Det (DP
                                                :Head (D :t "the"))
                                            :Head (Nom
                                                :Head (N :t "updation"))))
                                    :Mod (AdvP
                                        :Head (Adv :t "yet" :p ".")))))))))))

# sent_id = Tree goHangASalami-0
# sent_num = 42
# text = Go hang a salami, I'm a lasagna hog.
# sent = go hang a salami I 'm a lasagna hog
(Coordination
    :Coordinate (Clause
        :Head (VP
            :Head (V :t "go")
            :Comp (Clause
                :Head (VP
                    :Head (V :t "hang")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (N :t "salami")))))))
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :p "," :t "I")))
        :Head (VP
            :Head (V_aux :t "'m" :l "be")
            :PredComp (NP
                :Det (DP
                    :Head (D :t "a"))
                :Head (Nom
                    :Mod (Nom
                        :Head (N :t "lasagna"))
                    :Head (N :t "hog" :p "."))))))

# sent_id = Tree ItsAlrightTo-0
# sent_num = 43
# text = It's alright to say they're white.
# sent = it 's alright to say they 're white
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "it")))
    :Head (VP
        :Head (VP
            :Head (V_aux :t "'s" :l "be")
            :PredComp (AdjP
                :Head (Adj :t "alright")))
        :ExtraposedSubj (Clause
            :Head (VP
                :Marker (Sdr :t "to")
                :Head (VP
                    :Head (V :t "say")
                    :Comp (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "they")))
                        :Head (VP
                            :Head (V_aux :t "'re" :l "be")
                            :PredComp (AdjP
                                :Head (Adj :t "white" :p ".")))))))))

# sent_id = Tree HappierNewYear-0
# sent_num = 44
# text = May you have a happier new year!
# sent = may you -- have a happier new year
(Clause
    :Prenucleus (i / V_aux :t "may")
    :Head (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "you")))
        :Head (VP
            :Head (i / GAP)
            :Comp (Clause
                :Head (VP
                    :Head (V :t "have")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Mod (AdjP
                                :Head (Adj :t "happier"))
                            :Head (Nom
                                :Mod (AdjP
                                    :Head (Adj :t "new"))
                                :Head (N :t "year" :p "!")))))))))

# sent_id = Tree ItBlowsMyMind-0
# sent_num = 45
# text = It blows my mind that there is someone who is both old enough to have sequence of tense in quoted speech and young enough to have been in middle school at a time when Wikipedia existed.
# sent = it blows my mind that there is someone who -- is both old enough to have sequence of tense in quoted speech and young enough to have been in middle school at a time when Wikipedia existed --
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "it")))
    :Head (VP
        :Head (VP
            :Head (V :t "blows" :l "blow")
            :Obj (NP
                :Det (NP
                    :Head (Nom
                        :Head (N_pro :t "my" :l "I")))
                :Head (Nom
                    :Head (N :t "mind"))))
        :ExtraposedSubj (Clause
            :Marker (Sdr :t "that")
            :Head (Clause
                :Subj (NP
                    :Head (Nom
                        :Head (N_pro :t "there")))
                :Head (VP
                    :Head (V_aux :t "is" :l "be")
                    :DisplacedSubj (NP
                        :Head (Nom
                            :Det-Head (DP
                                :Head (D :t "someone"))
                            :Mod (Clause_rel
                                :Prenucleus (x / NP
                                    :Head (Nom
                                        :Head (N_pro :t "who")))
                                :Head (Clause_rel
                                    :Subj (x / GAP)
                                    :Head (VP
                                        :Head (V_aux :t "is" :l "be")
                                        :PredComp (Coordination
                                            :Coordinate (AdjP
                                                :Marker (DP
                                                    :Head (D :t "both"))
                                                :Head (AdjP
                                                    :Head (AdjP
                                                        :Head (Adj :t "old")
                                                        :Mod (DP
                                                            :Head (D :t "enough")))
                                                    :Comp_ind (Clause
                                                        :Head (VP
                                                            :Marker (Sdr :t "to")
                                                            :Head (VP
                                                                :Head (V :t "have")
                                                                :Obj (NP
                                                                    :Head (Nom
                                                                        :Head (N :t "sequence")
                                                                        :Mod (PP
                                                                            :Head (P :t "of")
                                                                            :Obj (NP
                                                                                :Head (Nom
                                                                                    :Head (N :t "tense"))))))
                                                                :Comp (PP
                                                                    :Head (P :t "in")
                                                                    :Obj (NP
                                                                        :Head (Nom
                                                                            :Mod (AdjP
                                                                                :Head (Adj :t "quoted" :l "quote"))
                                                                            :Head (N :t "speech")))))))))
                                            :Coordinate (AdjP
                                                :Marker (Coordinator :t "and")
                                                :Head (AdjP
                                                    :Head (AdjP
                                                        :Head (Adj :t "young")
                                                        :Mod (DP
                                                            :Head (D :t "enough")))
                                                    :Comp_ind (Clause
                                                        :Head (VP
                                                            :Marker (Sdr :t "to")
                                                            :Head (VP
                                                                :Head (V_aux :t "have")
                                                                :Comp (Clause
                                                                    :Head (VP
                                                                        :Head (VP
                                                                            :Head (V_aux :t "been" :l "be")
                                                                            :PredComp (PP
                                                                                :Head (P :t "in")
                                                                                :Obj (NP
                                                                                    :Head (Nom
                                                                                        :Mod (AdjP
                                                                                            :Head (Adj :t "middle"))
                                                                                        :Head (N :t "school")))))
                                                                        :Mod (PP
                                                                            :Head (P :t "at")
                                                                            :Obj (NP
                                                                                :Det (DP
                                                                                    :Head (D :t "a"))
                                                                                :Head (Nom
                                                                                    :Head (N :t "time")
                                                                                    :Mod (Clause_rel
                                                                                        :Prenucleus (y / PP
                                                                                            :Head (P :t "when"))
                                                                                        :Head (Clause_rel
                                                                                            :Subj (NP
                                                                                                :Head (Nom
                                                                                                    :Head (N :t "Wikipedia")))
                                                                                            :Head (VP
                                                                                                :Head (V :t "existed" :l "exist" :p ".")
                                                                                                :Mod (y / GAP)))))))))))))))))))))))))

# sent_id = Tree EveryNewYorker-0
# sent_num = 46
# text = Every New Yorker will receive and be prohibited from giving away a horse.
# sent = every New Yorker will receive -- and be prohibited from giving away -- a horse
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "every"))
        :Head (Nom
            :Head (N
                :Flat (N :t "New")
                :Flat (N :t "Yorker"))))
    :Head (VP
        :Head (V_aux :t "will")
        :Comp (Coordination
            :Head (Coordination
                :Coordinate (Clause
                    :Head (VP
                        :Head (V :t "receive")
                        :Obj (x / GAP)))
                :Coordinate (Clause
                    :Marker (Coordinator :t "and")
                    :Head (Clause
                        :Head (VP
                            :Head (V_aux :t "be"))
                        :Comp (Clause
                            :Head (VP
                                :Head (V :t "prohibited" :l "prohibit")
                                :Comp (PP
                                    :Head (P :t "from")
                                    :Comp (Clause
                                        :Head (VP
                                            :Head (V :t "giving" :l "give")
                                            :Particle (PP
                                                :Head (P :t "away"))
                                            :Obj (x / GAP)))))))))
            :Postnucleus (x / NP
                :Det (DP
                    :Head (D :t "a"))
                :Head (Nom
                    :Head (N :t "horse" :p "."))))))

# sent_id = Tree WasDiscoveringThatICould-0
# sent_num = 47
# text = Was discovering that I could use it to easily produce a plot of my own vowel space what finally convinced me to figure out R?
# sent = was discovering that I could use it to easily produce a plot of my own vowel space -- what -- finally convinced me to figure out R
(Clause
    :Prenucleus (x / V_aux :t "was" :l "be")
    :Head (Clause
        :Subj (Clause
            :Head (VP
                :Head (V :t "discovering" :l "discover")
                :Comp (Clause
                    :Marker (Sdr :t "that")
                    :Head (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "I")))
                        :Head (VP
                            :Head (V_aux :t "could")
                            :Comp (Clause
                                :Head (VP
                                    :Head (V :t "use")
                                    :Obj (NP
                                        :Head (Nom
                                            :Head (N_pro :t "it")))
                                    :Comp (Clause
                                        :Head (VP
                                            :Marker (Sdr :t "to")
                                            :Head (VP
                                                :Mod (AdvP
                                                    :Head (Adv :t "easily"))
                                                :Head (VP
                                                    :Head (V :t "produce")
                                                    :Obj (NP
                                                        :Det (DP
                                                            :Head (D :t "a"))
                                                        :Head (Nom
                                                            :Head (N :t "plot")
                                                            :Mod (PP
                                                                :Head (P :t "of")
                                                                :Obj (NP
                                                                    :Det (NP
                                                                        :Head (Nom
                                                                            :Head (N_pro :t "my" :l "I")))
                                                                    :Head (Nom
                                                                        :Mod (AdjP
                                                                            :Head (Adj :t "own"))
                                                                        :Head (Nom
                                                                            :Mod (Nom
                                                                                :Head (N :t "vowel"))
                                                                            :Head (N :t "space"))))))))))))))))))
        :Head (VP
            :Head (x / GAP)
            :PredComp (NP
                :Head (Nom
                    :Mod (Clause_rel
                        :Head-Prenucleus (y / NP
                            :Head (Nom
                                :Head (N_pro :t "what")))
                        :Head (Clause_rel
                            :Subj (y / GAP)
                            :Head (VP
                                :Mod (AdvP
                                    :Head (Adv :t "finally"))
                                :Head (VP
                                    :Head (V :t "convinced")
                                    :Obj (NP
                                        :Head (Nom
                                            :Head (N_pro :t "me" :l "I")))
                                    :Comp (Clause
                                        :Head (VP
                                            :Marker (Sdr :t "to")
                                            :Head (VP
                                                :Head (V :t "figure")
                                                :Particle (PP
                                                    :Head (P :t "out"))
                                                :Obj (NP
                                                    :Head (Nom
                                                        :Head (N :t "R" :p "?")))))))))))))))

# sent_id = Tree IdreamtIwasBeyoncé-0
# sent_num = 48
# text = I dreamt I was Beyoncé and I kissed me.
# sent = I dreamt I was Beyoncé and I kissed me
(Coordination :note "I_x dreamt I_x/y was Beyonce_y and I_x kissed me_y"
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "I")))
        :Head (VP
            :Head (V :t "dreamt" :l "dream")
            :Comp (Clause
                :Subj (NP
                    :Head (Nom
                        :Head (N_pro :t "I")))
                :Head (VP
                    :Head (V_aux :t "was" :l "be")
                    :PredComp (NP
                        :Head (Nom
                            :Head (N :t "Beyoncé")))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "and")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "I")))
            :Head (VP
                :Head (V :t "kissed" :l "kiss")
                :Obj (NP
                    :Head (Nom
                        :Head (N_pro :t "me" :l "I" :p ".")))))))

# sent_id = Tree ImLegitWritingIt-0
# sent_num = 49
# text = I'm legit writing it right now ✊🏽✊🏾✊🏿
# sent = I 'm legit writing it right now ✊🏽✊🏾✊🏿
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Head (V_aux :t "'m" :l "be")
        :Comp (Clause
            :Head (VP
                :Mod (AdvP
                    :Head (Adv :t "legit" :note "central adjunct following aux; cf. 'the question *really* is'"))
                :Head (VP
                    :Head (VP
                        :Head (V :t "writing" :l "write")
                        :Obj (NP
                            :Head (Nom
                                :Head (N_pro :t "it"))))
                    :Mod (PP
                        :Mod (AdvP
                            :Head (Adv :t "right"))
                        :Head (P :t "now"))))))
    :Supplement (IntP
        :Head (Int :t "✊🏽✊🏾✊🏿")))

# sent_id = Tree IFeelGoodAboutThat-0
# sent_num = 50
# text = I feel good about that when we cook it tastes good
# sent = I feel good about that when we cook it tastes good
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Head (V :t "feel")
        :Comp (AdjP
            :Head (Adj :t "good")
            :Comp (PP
                :Head (P :t "about")
                :Comp (Clause
                    :Marker (Sdr :t "that")
                    :Head (Clause
                        :Mod (PP
                            :Head (P :t "when")
                            :Comp (Clause
                                :Subj (NP
                                    :Head (Nom
                                        :Head (N_pro :t "we")))
                                :Head (VP
                                    :Head (V :t "cook"))))
                        :Head (Clause
                            :Subj (NP
                                :Head (Nom
                                    :Head (N_pro :t "it")))
                            :Head (VP
                                :Head (V :t "tastes" :l "taste")
                                :PredComp (AdjP
                                    :Head (Adj :t "good"))))))))))

# sent_id = Tree ImPostModerna-0
# sent_num = 51
# text = So I just got the first dose of the Moderna vaccine and now I guess I'm post-Moderna
# sent = so I just got the first dose of the Moderna vaccine and now I guess I 'm post-Moderna
(Coordination
    :Supplement (IntP
        :Head (Int :t "so"))
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "I")))
        :Head (VP
            :Mod (AdvP
                :Head (Adv :t "just"))
            :Head (VP
                :Head (V :t "got" :l "get")
                :Obj (NP
                    :Det (DP
                        :Head (D :t "the"))
                    :Head (Nom
                        :Mod (AdjP
                            :Head (Adj :t "first"))
                        :Head (Nom
                            :Head (N :t "dose")
                            :Comp (PP
                                :Head (P :t "of")
                                :Obj (NP
                                    :Det (DP
                                        :Head (D :t "the"))
                                    :Head (Nom
                                        :Mod (Nom
                                            :Head (N :t "Moderna"))
                                        :Head (N :t "vaccine"))))))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "and")
        :Head (Clause
            :Mod (PP
                :Head (P :t "now"))
            :Head (Clause
                :Subj (NP
                    :Head (Nom
                        :Head (N_pro :t "I")))
                :Head (VP
                    :Head (V :t "guess")
                    :Comp (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "I")))
                        :Head (VP
                            :Head (V_aux :t "'m" :l "be")
                            :PredComp (AdjP
                                :Head (Adj :t "post-Moderna")))))))))

# sent_id = Tree AThirdWaveIsPreventable-0
# sent_num = 52
# text = A third wave is preventable—it is totally preventable—the question really is, will we do what it takes to prevent it?
# sent = a third wave is preventable it is totally preventable the question really is will we -- do what it takes -- to prevent it
(Coordination
    :Coordinate (Clause
        :Subj (NP
            :Det (DP
                :Head (D :t "a"))
            :Head (Nom
                :Mod (AdjP
                    :Head (Adj :t "third"))
                :Head (N :t "wave")))
        :Head (VP
            :Head (V_aux :t "is" :l "be")
            :PredComp (AdjP
                :Head (Adj :t "preventable"))))
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :p "—" :t "it")))
        :Head (VP
            :Head (V_aux :t "is" :l "be")
            :PredComp (AdjP
                :Mod (AdvP
                    :Head (Adv :t "totally"))
                :Head (Adj :t "preventable"))))
    :Coordinate (Clause
        :Subj (NP
            :Det (DP
                :Head (D :p "—" :t "the"))
            :Head (Nom
                :Head (N :t "question")))
        :Head (VP
            :Mod (AdvP
                :Head (Adv :t "really" :note "central adjunct preceding aux, p. 780; clause-oriented adjunct pp. 575-578; unclear whether it should be regarded as inside the VP or not"))
            :Head (VP
                :Head (V_aux :t "is" :l "be")
                :PredComp (Clause
                    :Prenucleus (x / V_aux :p "," :t "will")
                    :Head (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "we")))
                        :Head (VP
                            :Head (x / GAP)
                            :Comp (Clause
                                :Head (VP
                                    :Head (V :t "do")
                                    :Obj (NP
                                        :Head (Nom
                                            :Mod (Clause_rel
                                                :Head-Prenucleus (y / NP
                                                    :Head (Nom
                                                        :Head (N_pro :t "what")))
                                                :Head (Clause_rel
                                                    :Subj (NP
                                                        :Head (Nom
                                                            :Head (N_pro :t "it")))
                                                    :Head (VP
                                                        :Head (V :t "takes" :l "take")
                                                        :Obj (y / GAP)
                                                        :Comp (Clause
                                                            :Head (VP
                                                                :Marker (Sdr :t "to")
                                                                :Head (VP
                                                                    :Head (V :t "prevent")
                                                                    :Obj (NP
                                                                        :Head (Nom
                                                                            :Head (N_pro :t "it" :p "?"))))))))))))))))))))

# sent_id = Tree StudioDecidesThisIsNoTime-0
# sent_num = 53
# text = Studio decides this is no time for No Time to Die to die
# sent = studio decides this is no time for no time to die -- to die --
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N :t "studio")))
    :Head (VP
        :Head (V :t "decides" :l "decide")
        :Comp (Clause
            :Subj (NP
                :Head (Nom
                    :Det-Head (DP
                        :Head (D :t "this"))))
            :Head (VP
                :Head (V_aux :t "is" :l "be")
                :PredComp (NP
                    :Det (DP
                        :Head (D :t "no"))
                    :Head (Nom
                        :Head (y / N :t "time")
                        :Mod (Clause_rel
                            :Marker (Sdr :t "for")
                            :Head (Clause_rel
                                :Subj (NP
                                    :Det (DP
                                        :Head (D :t "no"))
                                    :Head (Nom
                                        :Head (x / N :t "time")
                                        :Mod (Clause_rel
                                            :Head (VP
                                                :Marker (Sdr :t "to")
                                                :Head (VP
                                                    :Head (V :t "die")
                                                    :Mod (x / GAP))))))
                                :Head (VP
                                    :Marker (Sdr :t "to")
                                    :Head (VP
                                        :Head (V :t "die")
                                        :Mod (y / GAP)))))))))))

# sent_id = Tree IjustNeedToFindVotes-0
# sent_num = 54
# text = I just need to find 11,780 votes.
# sent = I just need to find 11,780 votes
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "I")))
    :Head (VP
        :Mod (AdvP
            :Head (Adv :t "just"))
        :Head (VP
            :Head (V :t "need")
            :Comp (Clause
                :Head (VP
                    :Marker (Sdr :t "to")
                    :Head (VP
                        :Head (V :t "find")
                        :Obj (NP
                            :Det (DP
                                :Head (D :t "11,780" :l "11780"))
                            :Head (Nom
                                :Head (N :t "votes" :l "vote" :p ".")))))))))

# sent_id = Tree I-mMutingMyself-0
# sent_num = 55
# text = I'm muting and uncameraing myself and you all make a tree while I do emoji reacts like a syntax ghost.
# sent = I 'm muting and uncameraing myself and you all make a tree while I do emoji reacts like a syntax ghost
(Coordination
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "I")))
        :Head (VP
            :Head (V_aux :t "'m" :l "be")
            :Comp (Clause
                :Head (VP
                    :Head (Coordination
                        :Coordinate (VP
                            :Head (V :t "muting" :l "mute"))
                        :Coordinate (VP
                            :Marker (Coordinator :t "and")
                            :Head (VP
                                :Head (V :t "uncameraing" :l "uncamera"))))
                    :Obj (NP
                        :Head (Nom
                            :Head (N :t "myself" :l "I")))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "and")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N_pro :t "you"))
                :Mod (NP
                    :Head (Nom
                        :Det-Head (DP
                            :Head (D :t "all")))))
            :Head (VP
                :Head (VP
                    :Head (V :t "make")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (N :t "tree"))))
                :Mod (PP
                    :Head (P :t "while")
                    :Comp (Clause
                        :Subj (NP
                            :Head (Nom
                                :Head (N_pro :t "I")))
                        :Head (VP
                            :Head (VP
                                :Head (V :t "do")
                                :Obj (NP
                                    :Head (Nom
                                        :Mod (Nom
                                            :Head (N :t "emoji"))
                                        :Head (N :t "reacts" :l "react"))))
                            :Mod (PP
                                :Head (P :t "like")
                                :Obj (NP
                                    :Det (DP
                                        :Head (D :t "a"))
                                    :Head (Nom
                                        :Mod (Nom
                                            :Head (N :t "syntax"))
                                        :Head (N :t "ghost" :p ".")))))))))))

# sent_id = Tree Krugman-0
# sent_num = 56
# text = It's giving a pot of money that is looking for somewhere to go, something to do.
# sent = it 's giving a pot of money that -- is looking for somewhere to go -- something to do --
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "it")))
    :Head (VP
        :Head (V_aux :t "'s" :l "be")
        :Comp (Clause
            :Head (VP
                :Head (V :t "giving" :l "give")
                :Obj_ind (NP
                    :Det (DP
                        :Head (D :t "a"))
                    :Head (Nom
                        :Head (x / Nom
                            :Head (N :t "pot")
                            :Mod (PP
                                :Head (P :t "of")
                                :Obj (NP
                                    :Head (Nom
                                        :Head (N :t "money")))))
                        :Mod (Clause_rel
                            :Marker (Sdr :t "that")
                            :Head (Clause_rel
                                :Subj (x / GAP)
                                :Head (VP
                                    :Head (V_aux :t "is" :l "be")
                                    :Comp (Clause
                                        :Head (VP
                                            :Head (V :t "looking" :l "look")
                                            :Comp (PP
                                                :Head (P :t "for")
                                                :Obj (NP
                                                    :Head (Nom
                                                        :Det-Head (y / DP
                                                            :Head (D :t "somewhere"))
                                                        :Mod (Clause_rel
                                                            :Head (VP
                                                                :Marker (Sdr :t "to")
                                                                :Head (VP
                                                                    :Head (V :t "go")
                                                                    :Comp (y / GAP))))))))))))))
                :Obj_dir (NP
                    :Head (Nom
                        :Det-Head (z / DP
                            :Head (D :p "," :t "something"))
                        :Mod (Clause_rel
                            :Head (VP
                                :Marker (Sdr :t "to")
                                :Head (VP
                                    :Head (V :t "do" :p ".")
                                    :Obj (z / GAP))))))))))

# sent_id = Tree TheDiscourseOnPronouns-0
# sent_num = 57
# text = The discourse on pronouns is especially wild here considering that literally none of these are pronouns.
# sent = the discourse on pronouns is especially wild here considering that literally none of these are pronouns
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "the"))
        :Head (Nom
            :Head (N :t "discourse")
            :Comp (PP
                :Head (P :t "on")
                :Obj (NP
                    :Head (Nom
                        :Head (N :t "pronouns" :l "pronoun"))))))
    :Head (VP
        :Head (VP
            :Head (V_aux :t "is" :l "be")
            :PredComp (AdjP
                :Mod (AdvP
                    :Head (Adv :t "especially"))
                :Head (Adj :t "wild")))
        :Mod (PP
            :Head (P :t "here")))
    :Supplement (PP
        :Head (P :t "considering")
        :Comp (Clause
            :Marker (Sdr :t "that")
            :Head (Clause
                :Subj (NP
                    :Mod (AdvP
                        :Head (Adv :t "literally"))
                    :Head (NP
                        :Head (Nom
                            :Det-Head (DP
                                :Head (D :t "none"))
                            :Comp (PP
                                :Head (P :t "of")
                                :Obj (NP
                                    :Head (Nom
                                        :Det-Head (DP
                                            :Head (D :t "these" :l "this"))))))))
                :Head (VP
                    :Head (V_aux :t "are" :l "be")
                    :PredComp (NP
                        :Head (Nom
                            :Head (N :t "pronouns" :l "pronoun" :p "."))))))))

# sent_id = Tree TheArtistFormerlyKnownAs-0
# sent_num = 58
# text = the artist formerly known as LUCA
# sent = the artist formerly known as LUCA
(NP
    :Det (DP
        :Head (D :t "the"))
    :Head (Nom
        :Head (N :t "artist")
        :Mod (Clause
            :Mod (AdvP
                :Head (Adv :t "formerly"))
            :Head (VP
                :Head (V :t "known" :l "know")
                :Comp (PP
                    :Head (P :t "as")
                    :PredComp (NP
                        :Head (Nom
                            :Head (N :t "LUCA"))))))))

# sent_id = Tree IMeanYeahOK-0
# sent_num = 59
# text = I mean yeah OK a clitic isn't really a word but "clitic" is a word.
# sent = I mean yeah OK a clitic isn't really a word but clitic is a word
(Coordination
    :Coordinate (Clause
        :Subj (NP
            :Head (Nom
                :Head (N_pro :t "I")))
        :Head (VP
            :Head (V :t "mean")
            :Supplement (IntP
                :Head (Int :t "yeah"))
            :Supplement (IntP
                :Head (Int :t "OK"))
            :Comp (Clause
                :Subj (NP
                    :Det (DP
                        :Head (D :t "a"))
                    :Head (Nom
                        :Head (N :t "clitic")))
                :Head (VP
                    :Head (VP
                        :Head (V_aux :t "isn't" :l "be" :subt "is" :subt "n't")
                        :Mod (AdvP
                            :Head (Adv :t "really")))
                    :PredComp (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (N :t "word")))))))
    :Coordinate (Clause
        :Marker (Coordinator :t "but")
        :Head (Clause
            :Subj (NP
                :Head (Nom
                    :Head (N :p "\"" :t "clitic" :note "''clitic''")))
            :Head (VP
                :Head (V_aux :p "\"" :t "is" :l "be")
                :PredComp (NP
                    :Det (DP
                        :Head (D :t "a"))
                    :Head (Nom
                        :Head (N :t "word" :p ".")))))))

# sent_id = Tree ThatIsSuchA-0
# sent_num = 60
# text = That is such a perfect example of the kind of nonsense that childhood consists of being forced to pretend is reasonable.
# sent = that is such a perfect example of the kind of nonsense that childhood consists of being forced to pretend -- is reasonable
(Clause
    :Subj (NP
        :Head (Nom
            :Det-Head (DP
                :Head (D :t "that"))))
    :Head (VP
        :Head (V_aux :t "is" :l "be")
        :PredComp (NP
            :Mod (AdjP :note "predeterminer"
                :Head (Adj :t "such"))
            :Head (NP
                :Det (DP
                    :Head (D :t "a"))
                :Head (Nom
                    :Head (Nom
                        :Mod (AdjP
                            :Head (Adj :t "perfect"))
                        :Head (N :t "example"))
                    :Comp (PP
                        :Head (P :t "of")
                        :Obj (NP
                            :Det (DP
                                :Head (D :t "the"))
                            :Head (Nom
                                :Head (x / Nom
                                    :Head (N :t "kind")
                                    :Comp (PP
                                        :Head (P :t "of")
                                        :Obj (NP
                                            :Head (Nom
                                                :Head (N :t "nonsense")))))
                                :Mod (Clause_rel
                                    :Marker (Sdr :t "that")
                                    :Head (Clause_rel
                                        :Subj (NP
                                            :Head (Nom
                                                :Head (N :t "childhood")))
                                        :Head (VP
                                            :Head (V :t "consists" :l "consist")
                                            :Comp (PP
                                                :Head (P :t "of")
                                                :Comp (Clause
                                                    :Head (VP
                                                        :Head (V_aux :t "being" :l "be")
                                                        :Comp (Clause
                                                            :Head (VP
                                                                :Head (V :t "forced" :l "force")
                                                                :Comp (Clause
                                                                    :Head (VP
                                                                        :Marker (Sdr :t "to")
                                                                        :Head (VP
                                                                            :Head (V :t "pretend")
                                                                            :Comp (Clause
                                                                                :Subj (x / GAP)
                                                                                :Head (VP
                                                                                    :Head (V_aux :t "is" :l "be")
                                                                                    :PredComp (AdjP
                                                                                        :Head (Adj :t "reasonable" :p ".")))))))))))))))))))))))

# sent_id = Tree AnAbstractSyntaxTree-0
# sent_num = 61
# text = An abstract syntax tree is abstract because it is a mathematical object that has certain structure by its very nature.
# sent = an abstract syntax tree is abstract because it is a mathematical object that -- has certain structure by its very nature
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "an" :l "a"))
        :Head (Nom
            :Mod (AdjP
                :Head (Adj :t "abstract"))
            :Head (Nom
                :Mod (Nom
                    :Head (N :t "syntax"))
                :Head (N :t "tree"))))
    :Head (VP
        :Head (VP
            :Head (V_aux :t "is" :l "be")
            :PredComp (AdjP
                :Head (Adj :t "abstract")))
        :Mod (PP
            :Head (P :t "because")
            :Comp (Clause
                :Subj (NP
                    :Head (Nom
                        :Head (N_pro :t "it")))
                :Head (VP
                    :Head (V_aux :t "is" :l "be")
                    :PredComp (NP
                        :Det (DP
                            :Head (D :t "a"))
                        :Head (Nom
                            :Head (x / Nom
                                :Mod (AdjP
                                    :Head (Adj :t "mathematical"))
                                :Head (N :t "object"))
                            :Mod (Clause_rel
                                :Marker (Sdr :t "that")
                                :Head (Clause_rel
                                    :Subj (x / GAP)
                                    :Head (VP
                                        :Head (VP
                                            :Head (V :t "has" :l "have")
                                            :Obj (NP
                                                :Head (Nom
                                                    :Mod (AdjP
                                                        :Head (Adj :t "certain"))
                                                    :Head (N :t "structure"))))
                                        :Mod (PP
                                            :Head (P :t "by")
                                            :Obj (NP
                                                :Det (NP
                                                    :Head (Nom
                                                        :Head (N_pro :t "its" :l "it")))
                                                :Head (Nom
                                                    :Mod (AdjP
                                                        :Head (Adj :t "very"))
                                                    :Head (N :t "nature" :p "."))))))))))))))

# sent_id = Tree NoSocietyCanSurely-0
# sent_num = 62
# text = No society can surely be flourishing and happy of which the far greater part of the members are poor and miserable.
# sent = no society can surely be flourishing and happy of which -- the far greater part of the members -- are poor and miserable
(Clause
    :Subj (NP
        :Det (DP
            :Head (D :t "no"))
        :Head (x / Nom
            :Head (N :t "society")))
    :Head (VP
        :Head (V_aux :t "can")
        :Comp (Clause
            :Mod (AdvP
                :Head (Adv :t "surely"))
            :Head (VP
                :Head (V_aux :t "be")
                :Comp (Coordination
                    :Coordinate (Clause
                        :Head (VP
                            :Head (V :t "flourishing" :l "flourish")))
                    :Coordinate (AdjP
                        :Marker (Coordinator :t "and")
                        :Head (AdjP
                            :Head (Adj :t "happy")))))))
    :Supplement (Clause_rel
        :Prenucleus (y / PP
            :Head (P :t "of")
            :Obj (NP
                :Det (DP
                    :Head (D :t "which"))
                :Head (x / GAP)))
        :Head (Clause_rel
            :Subj (NP
                :Det (DP
                    :Head (D :t "the"))
                :Head (Nom
                    :Mod (AdjP
                        :Mod (AdvP
                            :Head (Adv :t "far"))
                        :Head (Adj :t "greater"))
                    :Head (Nom
                        :Head (N :t "part")
                        :Comp (PP
                            :Head (P :t "of")
                            :Obj (NP
                                :Det (DP
                                    :Head (D :t "the"))
                                :Head (Nom
                                    :Head (N :t "members" :l "member")
                                    :Comp (y / GAP)))))))
            :Head (VP
                :Head (V_aux :t "are" :l "be")
                :PredComp (Coordination
                    :Coordinate (AdjP
                        :Head (Adj :t "poor"))
                    :Coordinate (AdjP
                        :Marker (Coordinator :t "and")
                        :Head (AdjP
                            :Head (Adj :t "miserable" :p "."))))))))

# sent_id = Tree EvidenceFor-0
# sent_num = 63
# text = Evidence for convergent structural organization in parrot song and human speech
# sent = evidence for convergent structural organization in parrot song and human speech
(NP
    :Head (Nom
        :Head (N :t "evidence")
        :Comp (PP
            :Head (P :t "for")
            :Obj (NP
                :Head (Nom
                    :Head (Nom
                        :Mod (AdjP
                            :Head (Adj :t "convergent"))
                        :Head (Nom
                            :Mod (AdjP
                                :Head (Adj :t "structural"))
                            :Head (N :t "organization")))
                    :Comp (PP
                        :Head (P :t "in")
                        :Obj (Coordination
                            :Coordinate (NP
                                :Head (Nom
                                    :Mod (Nom
                                        :Head (N :t "parrot"))
                                    :Head (N :t "song")))
                            :Coordinate (NP
                                :Marker (Coordinator :t "and")
                                :Head (NP
                                    :Head (Nom
                                        :Mod (AdjP
                                            :Head (Adj :t "human"))
                                        :Head (N :t "speech")))))))))))

# sent_id = Tree WeReAllFriends-0
# sent_num = 64
# text = We're all friends on this journey against linguistic discrimination.
# sent = we 're all friends on this journey against linguistic discrimination
(Clause
    :Subj (NP
        :Head (Nom
            :Head (N_pro :t "we")))
    :Head (VP
        :Head (VP
            :Head (VP
                :Head (V_aux :t "'re" :l "be")
                :Mod (NP
                    :Head (Nom
                        :Det-Head (DP
                            :Head (D :t "all" :note "implicit partitive fused-head quantificational adjunct, pp. 413, 428")))))
            :PredComp (NP
                :Head (Nom
                    :Head (N :t "friends" :l "friend"))))
        :Mod (PP
            :Head (P :t "on")
            :Obj (NP
                :Det (DP
                    :Head (D :t "this"))
                :Head (Nom
                    :Head (N :t "journey")
                    :Mod (PP
                        :Head (P :t "against")
                        :Obj (NP
                            :Head (Nom
                                :Mod (AdjP
                                    :Head (Adj :t "linguistic"))
                                :Head (N :t "discrimination" :p ".")))))))))

# sent_id = Tree AsOneOfTheWomen-0
# sent_num = 65
# text = As one of the many women in STEM Steve Pinker has blocked, I don't know what this tweet is saying.
# sent = as one of the many women in STEM Steve Pinker has blocked -- I don't know what this tweet is saying --
(Clause
    :Supplement (PP
        :Head (P :t "as")
        :PredComp (NP
            :Head (Nom
                :Det-Head (DP
                    :Head (D :t "one"))
                :Comp (PP
                    :Head (P :t "of")
                    :Obj (NP
                        :Det (DP
                            :Head (D :t "the"))
                        :Head (Nom
                            :Head (x / Nom
                                :Mod (DP
                                    :Head (D :t "many"))
                                :Head (Nom
                                    :Head (N :t "women" :l "woman")
                                    :Mod (PP
                                        :Head (P :t "in")
                                        :Obj (NP
                                            :Head (Nom
                                                :Head (N :t "STEM"))))))
                            :Mod (Clause_rel
                                :Subj (NP
                                    :Head (Nom
                                        :Head (N
                                            :Flat (N :t "Steve")
                                            :Flat (N :t "Pinker"))))
                                :Head (VP
                                    :Head (V_aux :t "has" :l "have")
                                    :Comp (Clause
                                        :Head (VP
                                            :Head (V :t "blocked" :l "block")
                                            :Obj (x / GAP)))))))))))
    :Subj (NP
        :Head (Nom
            :Head (N_pro :p "," :t "I")))
    :Head (VP
        :Head (V_aux :t "don't" :l "do" :subt "do" :subt "n't")
        :Comp (Clause
            :Head (VP
                :Head (V :t "know")
                :Comp (Clause
                    :Prenucleus (y / NP
                        :Head (Nom
                            :Head (N_pro :t "what")))
                    :Head (Clause
                        :Subj (NP
                            :Det (DP
                                :Head (D :t "this"))
                            :Head (Nom
                                :Head (N :t "tweet")))
                        :Head (VP
                            :Head (V_aux :t "is" :l "be")
                            :Comp (Clause
                                :Head (VP
                                    :Head (V :t "saying" :l "say" :p ".")
                                    :Obj (y / GAP))))))))))

